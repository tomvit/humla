#!/bin/sh
# This script creates a JSON ToC for all lectures in Humla.
# The script assumes that individual lecture files are named as lecture{N}.html 
# where {N} is a sequence number of the lecture. The script generates a ToC for every 
# lecture and combines all ToC from all lectures into a single JSON ToC document.  
# The ToC is generated by Humla API by using phantomjs.

# check if phantomjs is installed
phantomjs --version &>/dev/null
if [ $? -ne 0 ]; then
	echo "ToC cannot be generated, phantomjs is not available!"
	exit 1
fi

# get the script directory
CUR_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
echo $CUR_DIR

# creates the cache directory if it does not exist
mkdir -p cache

# find all lectures in the current directory, sort by lecture sequence number
ls | egrep "lecture[0-9]+.html" | egrep -o "[0-9]+" | sort -n | \
while read line; do
  lf="lecture$line.html"
  ln=$(printf "%02d" $line)
 
  tocfile="cache/lecture$ln.html-$(md5 -q $lf)"
  if ! [ -f $tocfile ]; then
    echo "Refreshing TOC cache for $lf..."
    rm -f cache/lecture$ln.html-*
    phantomjs $CUR_DIR/pjs_leccontents.js "$lf" >$tocfile
  fi
done

# get the last ToC ToC file
declare -a files
files=(cache/*)
pos=$(( ${#files[*]} - 1 ))
last=${files[$pos]}

# generate the complete json
echo "{ \"slides\" : [" >toc.json

for file in "${files[@]}"; do 
  if [[ $file == $last ]]
  then
     cat $file >>toc.json
     echo "]}" >>toc.json 
     break
  else 
    cat $file >>toc.json
    echo "," >>toc.json
  fi 
done 


